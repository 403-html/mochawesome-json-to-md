{"mappings":";;;;;;;;;;;;;AAMA,KAAK,CAAC,0BAAI,GAAG,yCAAK,CAAC,2BAAO,CAAC,OAAO,CAAC,IAAI,GACpC,MAAM,EAAC,IAAM;IACZ,KAAK,GAAE,CAAG;IACV,WAAW,GAAE,yBAA2B;IACxC,IAAI,GAAE,MAAQ;GAEf,MAAM,EAAC,MAAQ;IACd,KAAK,GAAE,CAAG;IACV,WAAW,GAAE,2BAA6B;IAC1C,IAAI,GAAE,MAAQ;IACd,OAAO,GAAE,sBAAwB;GAElC,MAAM,EAAC,SAAW;IACjB,WAAW,GACT,gEAAkE;IACpE,IAAI,GAAE,OAAS;IACf,OAAO,EAAE,IAAI;GAEd,MAAM,EAAC,WAAa;IACnB,WAAW,GAAE,wCAA0C;IACvD,IAAI,GAAE,MAAQ;IACd,OAAO,GAAE,WAAa;GAEvB,MAAM,EAAC,QAAU;IAChB,WAAW,GACT,4EAA8E;IAChF,IAAI,GAAE,OAAS;IACf,OAAO,EAAE,IAAI;GAEd,MAAM,EAAC,YAAc;IACpB,WAAW,GACT,uFAAyF;IAC3F,IAAI,GAAE,OAAS;IACf,OAAO,EAAE,IAAI;GAEd,MAAM,EAAC,SAAW;IACjB,WAAW,GACT,+FAAiG;IACnG,IAAI,GAAE,OAAS;IACf,OAAO,EAAE,IAAI;GAEd,MAAM,EAAC,UAAY;IAClB,WAAW,GACT,4FAA8F;IAChG,IAAI,GAAE,OAAS;IACf,OAAO,EAAE,KAAK;GAEf,MAAM,EAAC,UAAY;IAClB,WAAW,GACT,4FAA8F;IAChG,IAAI,GAAE,OAAS;IACf,OAAO,EAAE,IAAI;GAEd,MAAM,EAAC,WAAa;IACnB,WAAW,GACT,qGAAuG;IACzG,IAAI,GAAE,OAAS;IACf,OAAO,EAAE,IAAI;GAEd,MAAM,EAAC,WAAa;IACnB,WAAW,GACT,wGAA0G;IAC5G,IAAI,GAAE,OAAS;IACf,OAAO,EAAE,IAAI;GAEd,UAAU,EAAC,sBAAwB,GACnC,KAAK,EAAC,2CAA6C,GACnD,QAAQ,EACP,kFAAoF,GAErF,IAAI,GAAG,IAAI;AAEd,EAA6C,AAA7C,2CAA6C;AAC7C,KAAK,CAAC,gCAAU,mBACd,WAAW,cACX,SAAS,aACT,QAAQ,aACR,QAAQ,iBACR,YAAY,cACZ,SAAS,eACT,UAAU,eACV,UAAU,gBACV,WAAW,oBACX,UAAU,gBACV,WAAW,oBACX,UAAU,iBACV,YAAY,qBACZ,WAAW,mBACX,cAAc,qBACd,WAAW,cACX,SAAS,QACL,CAAC;IACL,KAAK,CAAC,OAAO,GAAG,QAAQ,IACnB,kBAAkB,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,GAAG,GAAG;IAEjE,KAAK,CAAC,WAAW,GAAG,YAAY,IAC3B,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,EAAE,EAAE,IAAI;IAGjD,KAAK,CAAC,QAAQ,GAAG,SAAS,IACrB,wBACH,EAAE,SAAS,IAAG,KAAI,OAAS,aAAa,EAAE,UAAU,CAAC,MAClD,EAAD,SAAS,IAAG,OAAK,OAAU,QAAQ,EAAE,WAAW,CAAC,MAAM,CAAC,MACtD,EAAF,SAAS,IAAG,IAAI,OAAQ,QAAQ,EAAE,WAAW,CAAC,MAAM,CAAC,MACrD,EAAA,SAAS,IAAG,KAAI,OAAS,SAAS,EAAE,YAAY,CAAC,MAAM,CAAC,MACvD,EAAD,SAAS,IAAG,OAAK,OAAU,oBAAoB,EAAE,cAAc,CAAC,MAAM,CAAC,MACrE,EAAF,SAAS,IAAG,OAAK,OAAU,OAAO,EAAE,UAAU,CAAC,GAAG;IAGlD,KAAC,CAAC,OAAO,IAAI,KAAK,EAAE,IAAI,GAAK,CAAC;QAChC,GAAG,CAAC,SAAS;QACb,qBAAO,CAAC,IAAI,WAAK,IAAI,UAAE,KAAK,MAC1B,SAAS,CAAC,IAAI,EACX,EAAE,EAAE,SAAS,MAAM,KAAK,QAAQ,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK;;eAG3D,kBAAI,CAAC,SAAS,GAAE,EAAI;IAC7B,CAAC;IAED,KAAK,CAAC,UAAU,aAAM,KAAK,UAAE,KAAK,eAAE,UAAU,UAAE,KAAK,MAAO,CAAC;QAC3D,EAAE,EAAE,KAAK,UACC,GAAG,EAAE,KAAK,CAAC,sEAKzB,EAAE,OAAO,CAAC,KAAK,EAAE,UAAU,EAAE,8BAEf;;IAIZ,CAAC;YAEO,EAAE,EAAE,WAAW,CAAC,EAC1B,EAAE,OAAO,CAAC,EACV,EAAE,WAAW,CAAC,EACd,EAAE,QAAQ,CAAC,EACX,EAAE,UAAU;QACV,KAAK,GAAE,YAAc;QACrB,KAAK,GAAE,MAAI;QACP,UAAM,EAAE,WAAW;QACvB,KAAK,EAAE,UAAU;OAChB,EACH,EAAE,UAAU;QACV,KAAK,GAAE,YAAc;QACrB,KAAK,GAAE,IAAG;QACP,UAAO,EAAE,WAAW;QACvB,KAAK,EAAE,UAAU;OAChB,EACH,EAAE,UAAU;QACV,KAAK,GAAE,aAAe;QACtB,KAAK,GAAE,IAAG;QACP,UAAO,EAAE,YAAY;QACxB,KAAK,EAAE,WAAW;OACjB,EACH,EAAE,UAAU;QACV,KAAK,GAAE,wBAA0B;QACjC,KAAK,GAAE,MAAI;QACX,UAAU,EAAE,cAAc;QAC1B,KAAK,EAAE,WAAW;OACjB,EACH;AACA,CAAC;AAED,EAAoC,AAApC,kCAAoC;AACpC,KAAK,CAAC,oCAAc,IAAI,IAAI,GAAK,CAAC;IAChC,EAAE,SAAS,IAAI,MAAK,MAAQ,GAC1B,KAAK,CAAC,GAAG,CAAC,KAAK,EACZ,sDAAsD,SAAS,IAAI;IAIxE,GAAG,CAAC,OAAO;QACP,CAAC;QACH,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,sBAAY,CAAC,IAAI;IACxC,CAAC,QAAQ,GAAG,EAAE,CAAC;QACb,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,+BAA+B,EAAE,GAAG;IACvD,CAAC;WACM,OAAO;AAChB,CAAC;AAED,EAAiD,AAAjD,+CAAiD;AACjD,KAAK,CAAC,wCAAkB,YAAM,IAAI,QAAE,GAAG,SAAE,IAAI,GAAG,GAAG,CAAC,IAAI,UAAE,KAAK,WAAY,CAAC;IAC1E,GAAG,CAAC,UAAU,GAAG,KAAK;IACtB,EAAE,EAAE,GAAG,CAAC,IAAI,EAAE,MAAM,GAAG,CAAC,OACjB,KAAK,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,EAAG,CAAC;QAC7B,KAAK,CAAC,eAAe,GAAG,kBAAI,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,GAAK,IAAI,CAAC,IAAI,KAAK,IAAI;;QACpE,UAAU,CAAC,IAAI;kBAAG,IAAI;eAAK,eAAe;;IAC5C,CAAC;IAEH,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,OAClB,KAAK,CAAC,IAAI,IAAI,GAAG,CAAC,MAAM,CAC3B,wCAAkB;QAChB,IAAI,EAAE,IAAI;QACV,GAAG,EAAE,IAAI;cACT,IAAI;QACJ,KAAK,EAAE,UAAU;;WAIhB,UAAU;AACnB,CAAC;AAED,EAAoD,AAApD,kDAAoD;AACpD,KAAK,CAAC,2BAAK,IAAI,OAAO,GAAK,CAAC;IAC1B,KAAK,CAAC,KAAK;SAAI,MAAQ;SAAE,QAAU;SAAE,OAAS;SAAE,OAAS;;IACzD,GAAG,CAAC,KAAK;IAET,qBAAO,CAAC,KAAK,GAAG,IAAI,GAAK,CAAC;QACxB,GAAG,CAAC,SAAS;QAEb,qBAAO,CAAC,OAAO,GAAG,MAAM,GAAK,CAAC;YAC5B,SAAS,CAAC,IAAI,IACT,wCAAkB;gBACnB,IAAI,EAAE,IAAI;gBACV,GAAG,EAAE,MAAM;;QAGjB,CAAC;QAED,KAAK,CAAC,IAAI,CAAC,SAAS;IACtB,CAAC;WAEM,KAAK;AACd,CAAC;AAED,EAA8C,AAA9C,4CAA8C;AAC9C,KAAK,CAAC,oCAAc,eAAM,OAAO,UAAE,KAAK,MAAO,CAAC;IAC9C,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK;IAC7B,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ;IAC/B,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK;IAC9B,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK;IAC9B,KAAK,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,cAAc,IAC3D,2BAAK,CAAC,OAAO;;mBAGb,SAAS;kBACT,QAAQ;oBACR,UAAU;oBACV,UAAU;qBACV,WAAW;qBACX,WAAW;sBACX,YAAY;wBACZ,cAAc;;AAElB,CAAC;AAED,EAA0D,AAA1D,wDAA0D;AAC1D,KAAK,CAAC,mCAAa,OAAS,CAAC;IAC3B,KAAK,SACH,IAAI,WACJ,MAAM,cACN,SAAS,gBACT,WAAW,aACX,QAAQ,iBACR,YAAY,cACZ,SAAS,eACT,UAAU,eACV,UAAU,gBACV,WAAW,gBACX,WAAW,QACT,0BAAI;IAER,KAAK,CAAC,SAAS,GAAG,oCAAc,CAAC,IAAI;IACrC,KAAK,CAAC,eAAe,GAAG,oCAAc,CAAC,SAAS;IAChD,KAAK,CAAC,WAAW,GAAG,gCAAU;WACzB,eAAe;mBAClB,SAAS;qBACT,WAAW;kBACX,QAAQ;sBACR,YAAY;mBACZ,SAAS;oBACT,UAAU;oBACV,UAAU;qBACV,WAAW;qBACX,WAAW;;IAGb,mBAAS,CAAC,MAAM,EAAE,WAAW,GAAG,GAAG,GAAK,CAAC;QACvC,EAAE,EAAE,GAAG,EACL,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG;IAEvB,CAAC;AACH,CAAC;AAED,mCAAa","sources":["src/index.js"],"sourcesContent":["#!/usr/bin/env node\r\nimport { readFileSync, writeFile } from \"fs\";\r\nimport yargs from \"yargs/yargs\";\r\nimport { hideBin } from \"yargs/helpers\";\r\nimport { forEach, join, find } from \"lodash\";\r\n\r\nconst argv = yargs(hideBin(process.argv))\r\n  .option(\"path\", {\r\n    alias: \"p\",\r\n    description: \"define path to the report\",\r\n    type: \"string\",\r\n  })\r\n  .option(\"output\", {\r\n    alias: \"o\",\r\n    description: \"define path for the md file\",\r\n    type: \"string\",\r\n    default: \"./md-reports/output.md\",\r\n  })\r\n  .option(\"showEmoji\", {\r\n    description:\r\n      \"defines whether there should be emoji in the final markdown file\",\r\n    type: \"boolean\",\r\n    default: true,\r\n  })\r\n  .option(\"reportTitle\", {\r\n    description: \"define report title in the final md file\",\r\n    type: \"string\",\r\n    default: \"Test report\",\r\n  })\r\n  .option(\"showDate\", {\r\n    description:\r\n      \"defines whether there should be visible test date in the final markdown file\",\r\n    type: \"boolean\",\r\n    default: true,\r\n  })\r\n  .option(\"showDuration\", {\r\n    description:\r\n      \"defines whether there should be visible duration of the test in the final markdown file\",\r\n    type: \"boolean\",\r\n    default: true,\r\n  })\r\n  .option(\"showStats\", {\r\n    description:\r\n      \"defines whether there should be visible high level stats of the test in the final markdown file\",\r\n    type: \"boolean\",\r\n    default: true,\r\n  })\r\n  .option(\"showPassed\", {\r\n    description:\r\n      \"defines whether there should be visible section with passed tests in the final markdown file\",\r\n    type: \"boolean\",\r\n    default: false,\r\n  })\r\n  .option(\"showFailed\", {\r\n    description:\r\n      \"defines whether there should be visible section with failed tests in the final markdown file\",\r\n    type: \"boolean\",\r\n    default: true,\r\n  })\r\n  .option(\"showSkipped\", {\r\n    description:\r\n      \"defines whether there should be visible section with skipped by user tests in the final markdown file\",\r\n    type: \"boolean\",\r\n    default: true,\r\n  })\r\n  .option(\"showCypress\", {\r\n    description:\r\n      \"defines whether there should be visible section with skipped by Cypress tests in the final markdown file\",\r\n    type: \"boolean\",\r\n    default: true,\r\n  })\r\n  .scriptName(\"mochawesome-json-to-md\")\r\n  .usage(\"$0 -p file/path.json -o file/path.md [args]\")\r\n  .epilogue(\r\n    \"for more information, visit https://github.com/htd-tstepien/mochawesome-json-to-md\"\r\n  )\r\n  .help().argv;\r\n\r\n// Create md string based on all informations\r\nconst mdTemplate = ({\r\n  reportTitle,\r\n  startDate,\r\n  showDate,\r\n  duration,\r\n  showDuration,\r\n  showStats,\r\n  totalTests,\r\n  otherTests,\r\n  passedTests = [],\r\n  showPassed,\r\n  failedTests = [],\r\n  showFailed,\r\n  skippedTests = [],\r\n  showSkipped,\r\n  skippedCypress = [],\r\n  showCypress,\r\n  showEmoji,\r\n}) => {\r\n  const genDate = showDate\r\n    ? `> Run start date: ${new Date(startDate).toLocaleString()} \\n`\r\n    : \"\";\r\n  const genDuration = showDuration\r\n    ? `> Duration: ${Math.round(duration / 60)}s \\n`\r\n    : \"\";\r\n\r\n  const genStats = showStats\r\n    ? `## Tests run stats\r\n  - ${showEmoji ? \"📚 \" : \"\"}total tests: ${totalTests}\r\n  - ${showEmoji ? \"✔️ \" : \"\"}passed: ${passedTests.length}\r\n  - ${showEmoji ? \"❌ \" : \"\"}failed: ${failedTests.length}\r\n  - ${showEmoji ? \"🔜 \" : \"\"}skipped: ${skippedTests.length}\r\n  - ${showEmoji ? \"⚠️ \" : \"\"}skipped by Cypress: ${skippedCypress.length}\r\n  - ${showEmoji ? \"❇️ \" : \"\"}other: ${otherTests} \\n`\r\n    : \"\";\r\n\r\n  const genList = (emoji, list) => {\r\n    let cacheList = [];\r\n    forEach(list, ({ path, title }) =>\r\n      cacheList.push(\r\n        `- ${showEmoji ? `${emoji}` : \"\"} Path: ${path}, test: ${title}`\r\n      )\r\n    );\r\n    return join(cacheList, \"\\n\");\r\n  };\r\n\r\n  const genSection = ({ title, emoji, collection, check }) => {\r\n    if (check) {\r\n      return `## ${title}\r\n  <details>\r\n  <summary>Click to reveal</summary>\r\n  <article>\r\n  \r\n${genList(emoji, collection)}\r\n  </article>\r\n  </details>\\n`;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  return `# ${reportTitle}\r\n${genDate}\r\n${genDuration}\r\n${genStats}\r\n${genSection({\r\n  title: \"Passed tests\",\r\n  emoji: \"✔️\",\r\n  collection: passedTests,\r\n  check: showPassed,\r\n})}\r\n${genSection({\r\n  title: \"Failed tests\",\r\n  emoji: \"💢\",\r\n  collection: failedTests,\r\n  check: showFailed,\r\n})}\r\n${genSection({\r\n  title: \"Skipped tests\",\r\n  emoji: \"🔜\",\r\n  collection: skippedTests,\r\n  check: showSkipped,\r\n})}\r\n${genSection({\r\n  title: \"Skipped tests by Cypress\",\r\n  emoji: \"⚠️\",\r\n  collection: skippedCypress,\r\n  check: showCypress,\r\n})}\r\n`;\r\n};\r\n\r\n// Read json file and save it as obj\r\nconst getJsonFileObj = (path) => {\r\n  if (typeof path !== \"string\") {\r\n    throw new Error(\r\n      `Provide string path for JSON file, actually you pass: ${typeof path}`\r\n    );\r\n  }\r\n\r\n  let jsonObj;\r\n  try {\r\n    jsonObj = JSON.parse(readFileSync(path));\r\n  } catch (err) {\r\n    throw new Error(`Error while parsing JSON file: ${err}`);\r\n  }\r\n  return jsonObj;\r\n};\r\n\r\n// Reccurency return of all tests with given type\r\nconst grabAllTestsByType = ({ type, dir, path = dir.file, cache = [] }) => {\r\n  let localCache = cache;\r\n  if (dir[type].length > 0) {\r\n    for (const uuid of dir[type]) {\r\n      const foundTestByUuid = find(dir.tests, (test) => test.uuid === uuid);\r\n      localCache.push({ path, ...foundTestByUuid });\r\n    }\r\n  }\r\n  if (dir.suites.length > 0) {\r\n    for (const suit of dir.suites) {\r\n      grabAllTestsByType({\r\n        type: type,\r\n        dir: suit,\r\n        path,\r\n        cache: localCache,\r\n      });\r\n    }\r\n  }\r\n  return localCache;\r\n};\r\n\r\n// Return list of all tests from collection by types\r\nconst getIt = (results) => {\r\n  const types = [\"passes\", \"failures\", \"pending\", \"skipped\"];\r\n  let cache = [];\r\n\r\n  forEach(types, (type) => {\r\n    let typeCache = [];\r\n\r\n    forEach(results, (result) => {\r\n      typeCache.push(\r\n        ...grabAllTestsByType({\r\n          type: type,\r\n          dir: result,\r\n        })\r\n      );\r\n    });\r\n\r\n    cache.push(typeCache);\r\n  });\r\n\r\n  return cache;\r\n};\r\n\r\n// Get all needed info from parsed json object\r\nconst extractAllInfo = ({ results, stats }) => {\r\n  const startDate = stats.start;\r\n  const duration = stats.duration;\r\n  const totalTests = stats.tests;\r\n  const otherTests = stats.other;\r\n  const [passedTests, failedTests, skippedTests, skippedCypress] =\r\n    getIt(results);\r\n\r\n  return {\r\n    startDate,\r\n    duration,\r\n    totalTests,\r\n    otherTests,\r\n    passedTests,\r\n    failedTests,\r\n    skippedTests,\r\n    skippedCypress,\r\n  };\r\n};\r\n\r\n// main function to call converting and processing md file\r\nconst mocha_convert = () => {\r\n  const {\r\n    path,\r\n    output,\r\n    showEmoji,\r\n    reportTitle,\r\n    showDate,\r\n    showDuration,\r\n    showStats,\r\n    showPassed,\r\n    showFailed,\r\n    showSkipped,\r\n    showCypress,\r\n  } = argv;\r\n\r\n  const outputObj = getJsonFileObj(path);\r\n  const convertedReport = extractAllInfo(outputObj);\r\n  const generatedMd = mdTemplate({\r\n    ...convertedReport,\r\n    showEmoji,\r\n    reportTitle,\r\n    showDate,\r\n    showDuration,\r\n    showStats,\r\n    showPassed,\r\n    showFailed,\r\n    showSkipped,\r\n    showCypress,\r\n  });\r\n\r\n  writeFile(output, generatedMd, (err) => {\r\n    if (err) {\r\n      throw new Error(err);\r\n    }\r\n  });\r\n};\r\n\r\nmocha_convert();\r\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}